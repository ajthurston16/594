import java.util.LinkedList;

/**
 * 
 */

/**
 * @author Alex Thurston
 *
 */
public class MyBoard implements Board {
	
	private final int size; //TODO: Should this be a capitalized var?
	private final int[][] board;
	private boolean isWhitesTurn;
	private LinkedList<int[]> squaresToFlip;
	
	public MyBoard(int size) {
		this.size = size;
		this.board = new int[size][size];
	}


	public boolean placePiece(int row, char column, boolean isWhitesTurn) {
	    // Kind of annoying how this interface is designed. Requires redundant transformations of column into an int
	    int x = row - 1;
	    int y = (int) column - 65;
	    if (this.isMoveLegal(row, column, isWhitesTurn)) {
	        this.board[x][y] = (isWhitesTurn) ? 1 : -1;
	        this.printBoard();
	        return true;
	    }
	    this.printBoard();
	    return false;
	}

	
	public void printBoard() {
	    System.out.println("   _________________");
	    for(int i = 0; i < this.size; i++) {
	        System.out.print(i + 1 + " | ");
	        for(int j = 0; j < this.size; j++) {
	            String toPrint;
	            switch(this.board[i][j]){
	            case 0:
	                toPrint = "  ";
	                break;
	            case 1: 
	                toPrint = "W ";
	                break;
	            default:
	                toPrint = "B ";
	                break;
	            }
	            System.out.print(toPrint);
	        }
	        System.out.println("|");
	    }
	    System.out.println("   -----------------\n    A B C D E F G H");
	    String currentTurn = (this.isWhitesTurn) ? "White" : "Black";
	    System.out.println("Current Turn - " + currentTurn);
	}


	@Override
	public boolean isMoveLegal(int row, char column, boolean isWhitesTurn) {
	    int yCenter = (int) column - 65;
	    int xCenter = row - 1;
	    int srchVal = (isWhitesTurn) ? 1 : -1;
	    /* Only begin searching the board if the coordinates are on the board and the point is not occupied*/
	    if (xCenter >= 0 && xCenter < this.size && yCenter >= 0 && yCenter < this.size
	            && this.board[xCenter][yCenter] == 0){
	        boolean isLegal = false;
	        /* Set up start and stop points for our initial search around the proposed move*/
	        int xIndex = xCenter - 1; 
	        if (xIndex < 0) {xIndex = 0;}
	        int yIndex = yCenter - 1;
	        if (yIndex < 0) {yIndex = 0;}

	        int xStop = xCenter + 2;
	        if (xStop > this.size) {xStop = this.size;}
	        int yStop = yCenter + 2;
	        if (yStop > this.size) {yStop = this.size;}

	        /* Look for boxes immediately surrounding the center point that are of a different color */
	        for(int x = xIndex; x < xStop; x++){
	            for(int y = yIndex; y < yStop; y++){
	                if(this.board[x][y] == -srchVal) {
	                    int[] searchDirections = searchDirections(xCenter, yCenter, x, y);
	                    isLegal = isLegal || this.directionalSearch(x, y, srchVal, searchDirections);
	                }
	            }
	        }
	        return isLegal;
	    }
		return false;
	}


	/* This is a helper to determine in which direction to propagate a search of the board.
	It returns a tuple-like array with two values: an x differential and a y differential for the next coordinate,
	relative to the last point searched. E.g. Searching along lower right diagonal would return {+1, -1} */
	private static int[] searchDirections(int xCenter, int yCenter, int x, int y) {
	    x = x - xCenter;
	    y = y - yCenter;
	    return new int[] {x, y};
	}

	
	private boolean directionalSearch(int xStart, int yStart, int srchVal, int[] searchDirections) {
	    int x = xStart + searchDirections[0];
	    int y = yStart + searchDirections[1];
	    while(x >= 0 && x < this.size && y >= 0 && y < this.size){
            /* If correct kind of point is found, flip all previous points on the search path, and return true */
            if(this.board[x][y] == srchVal){
                int i = xStart;
                int j = yStart;
                while(i != x || j != y){
                    int[] coordinates = {x, y};
                    this.squaresToFlip.push(coordinates));
                    System.out.println(this.squaresToFlip.pop());
                    //this.board[i][j] = -this.board[i][j];
                    i += searchDirections[0];
                    j += searchDirections[1];
                }
                return true;
            }
            /* If you arrive at a blank spot, terminate the search and return false */
            if(this.board[x][y] == 0) {
                return false;
            }
            x += searchDirections[0];
            y += searchDirections[1];
	    }
	    return false;
	}


	public boolean isGameOver(boolean isWhiteTurn) {
	    boolean legalMoveFound = false;
	    while(!legalMoveFound){
	        //TODO: loop through the board here, and somehow check if a move there would be legal, using something
	        // similar to the directional search
	        // could maybe add a default argument to isMoveLegal e.g. searchMode: perform both kinds of searches, but
	        // don't change the board
	    }
	    for(int x = 0; x < this.size; x++){
	    
	    }
	    return true;
	}


    public void setStartingPositions() {
        this.board[3][3] = 1;
        this.board[4][4] = 1;
        this.board[3][4] = -1;
        this.board[4][3] = -1;
    }






    public void testBoard(int row, char column, int expected){
        int x = row -1;
        int y = (int) column - 65;
        System.out.println("Test Case:");
        if(this.board[x][y] == expected){
            System.out.println(row + "," + column + " == " + expected + ": PASS");
        }
        else {
            System.out.println(row + "," + column + " == " + expected + ": FAIL");
        }
    }



    public static void main(String[] args) {
        /* Some basic visual tests */
        
        MyBoard board = new MyBoard(8);
        board.setStartingPositions();
        board.printBoard();
        
        /* Starting positions successfully set: */
        board.testBoard(5, 'D', -1);
        board.testBoard(5, 'E', 1);
        
        board.placePiece(4, 'C', false);
        board.printBoard();
        /* Piece placed successfully on board: */
        board.testBoard(4, 'C', -1);
        /* Sandwiched piece successfully changed from white to black: */
        board.testBoard(4, 'D', -1);
        /* Adjacent blank square unaffected by insertion: */ 
        board.testBoard(3, 'C', 0);
        
        //TODO: set up here to test sandwiching in multiple directions
        board.placePiece(3, 'E', true);
        board.printBoard();
        board.placePiece(5, 'F', false);
        board.printBoard();
        
        /* Placing pieces diagonally works as expected: */
        board.placePiece(6, 'G', true);
        board.testBoard(6, 'G', 1);
        board.testBoard(5, 'F', 1);
        board.printBoard();
        
        /* More than two pieces can be sandwiched in a single move: */
        board.placePiece(2, 'E', false);
        board.testBoard(3, 'E', -1);
        board.testBoard(4, 'E', -1);
        board.printBoard();
        
        /* Illegal move will not be made: */
        board.placePiece(6, 'D', true);
        board.testBoard(6, 'D', 0);

    }


    public void setTurn(boolean isWhitesTurn) {
        this.isWhitesTurn = isWhitesTurn;
        
    }
}
